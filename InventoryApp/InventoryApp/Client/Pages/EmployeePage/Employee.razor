@page "/employees"
@inject NavigationManager Navigation
@inject IEmployeeService EmployeeService
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Employee</PageTitle>

<PageTitleDiv Title="employees" 
    Message="Register a new employee" 
    NavigateTo="@AddEmployee" />

<div class="my-3 p-3 bg-white rounded shadow">
    <nav aria-label="breadcrumb" class="border-bottom mt-1 mb-4">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item active" aria-current="page">Employee</li>
        </ol>
    </nav>
    
    @if (employees == null) 
    {
        @if (isAuthorized)
        {
            <p>Loading...</p>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                <strong>You are not authorized to access this page</strong>
                <p>You must be an administrator to view all employees</p>
                <p>Please <a href="/login">login</a> as an administrator</p>
            </div>
        }
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <h6 class="m-0">employees</h6>
            </div>
            <div class="card-body">
                <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Avatar</th>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th style="width: 6.7rem;">Actions</th>
                    </tr>
                </thead>
                <tbody style="overflow-wrap: anywhere;">
                    @foreach (var employee in employees)
                    {
                        <tr>
                            <td>
                                <div class="img-container">
                                    <img src="@employee.Avatar" class="avatar" alt="Image" />
                                </div>
                            </td>
                            <td>@employee.FirstName</td>
                            <td>@employee.LastName</td>
                            <td>@employee.Email</td>
                            <td>@employee.PhoneNumber</td>
                            <td class="align-middle text-center">
                                <button class="btn btn-white btn-white-hover" @onclick="@(() => UpdateEmployee(employee.Id))">
                                    <i class="oi oi-pencil"></i>
                                </button>
                                <button class="btn btn-white btn-white-hover" @onclick="@(() => DeleteEmployee(employee.Id))">
                                    <i class="oi oi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            </div>
        </div>
        <div class="card-footer">
            --
        </div>
    }
</div>



@code {
    private List<GetEmployeeDto>? employees;
    private bool isAuthorized = true;

    protected override async Task OnInitializedAsync()
    {
        bool isAdmin = await AuthService.IsInRoleAdmin("Administrator");
        if (!isAdmin)
            isAuthorized = false;
        else 
            await GetAll();
    }

    void AddEmployee()
    {
        Navigation.NavigateTo("employee/");
    }

    void UpdateEmployee(int Id)
    {
        Navigation.NavigateTo($"employee/{Id}");
    }

    private async Task GetAll()
    {
        var result = await EmployeeService.GetEmployees();
        if (result.Success)
            employees = result.Data;
        else
            await JSRuntime.InvokeAsync<string>("alert", result.Message);

        StateHasChanged();
    }

    async void DeleteEmployee(int Id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to delete this Employee?");
        if (confirmed)
        {
            var result = await EmployeeService.DeleteEmployee(Id);
            if (result.Success)
            {
                await GetAll();
                await JSRuntime.InvokeVoidAsync("alert", "Employee deleted");
            }
            else
                await JSRuntime.InvokeVoidAsync("alert", result.Message);
        }
    }
}
