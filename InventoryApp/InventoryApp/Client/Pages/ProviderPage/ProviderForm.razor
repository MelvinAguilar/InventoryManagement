@page "/provider/"
@page "/provider/{id:int}"
@inject NavigationManager Navigation
@inject IProviderService ProviderService
@attribute [Authorize]

<PageTitle>Provider Form</PageTitle>

<div class="p-3 my-3 align-items-center text-white bg-blue-gradiant rounded shadow">
    @if (Id > 0)
    {
        <h1 class="h3 mb-0 text-center">Edit Provider</h1>
    }
    else
    {
        <h1 class="h3 mb-0 text-center">Add a new Provider</h1>
    }  
</div>

<div class="my-3 p-3 bg-white rounded shadow">
    <nav aria-label="breadcrumb" class="border-bottom mt-1">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="categories">Provider</a></li>
            @if (Id > 0)
            {
                <li class="breadcrumb-item active" aria-current="page">Edit Provider</li>
            }
            else
            {
                <li class="breadcrumb-item active" aria-current="page">Add Provider</li>
            }
        </ol>
    </nav>
    <div class="row my-1 justify-content-end">
        <div class="col-sm-auto">
            <button class="btn btn-default" @onclick="Clear">
                <i class="oi oi-trash"></i> Clear the form
            </button>
        </div>
    </div>
    <div class="card">
        <div class="card-header">
            <h4 class="card-header-title h5">Provider information</h4>
        </div>
        <div class="card-body">
            <EditForm Model="provider" OnValidSubmit="HandleAddOrUpdateProvider">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="name">Name</label>
                    <InputText id="name" @bind-Value="provider.Name" type="text" class="form-control" placeholder="Food Inc." />
                    <ValidationMessage For="@(() => provider.Name)" />       
                </div>
                <div class="mb-3">
                    <label for="phone">Phone Number</label>
                    <InputText id="phone" @bind-Value="provider.PhoneNumber" type="text" class="form-control" placeholder="### ####-####" />
                    <ValidationMessage For="@(() => provider.PhoneNumber)" />       
                </div>
                <div class="mb-3">
                    <label for="address">Address</label>
                    <InputText id="address" @bind-Value="provider.Address" type="text" class="form-control" placeholder="123 Main St." />
                    <ValidationMessage For="@(() => provider.Address)" />       
                </div>
                <div class="mb-3">
                    <label for="description">Description</label>
                    <InputTextArea id="description" @bind-Value="provider.Description" type="text" class="form-control" placeholder="Lorem ipsum" />
                    <ValidationMessage For="@(() => provider.Description)" />
                </div>
                <button type="submit" class="btn btn-primary mt-2">@btnText</button>
            </EditForm>
        </div>
    </div>
    
</div>

<div class="@messageCssClass alert-dismissible alert-fixed position-fixed bottom-0" hidden="@hideMessage" role="alert">
    <span>@message</span>
    <a href="Provider/@IdNewProvider" hidden="@hideLink">Edit the Provider</a>
    <button type="button" class="btn-close" @onclick="ToggleMessage"></button>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private AddProviderDto provider = new AddProviderDto();

    private string message = string.Empty;
    private string messageCssClass = string.Empty;
    private string btnText = "Add the Provider";
    private bool hideMessage = true;
    private bool hideLink = true;

    private int IdNewProvider = 0;

    protected override async Task OnParametersSetAsync()
    {
        hideMessage = true;
        if (Id > 0)
        {
            await LoadProvider();
            btnText = "Edit the Provider";
        }
        else
        {
            provider = new AddProviderDto();
            btnText = "Add the Provider";
        }
    }

    private async Task LoadProvider()
    {
        var response = await ProviderService.GetProvider(Id);

        if (response.Success && response.Data!=null)
        {
            var updProvider = response.Data;
                       
            provider = new AddProviderDto
            {
                Name = updProvider.Name,
                PhoneNumber = updProvider.PhoneNumber,
                Address = updProvider.Address,
                Description = updProvider.Description
            };
        }
        else
        {
            ShowMessage(false, response.Message) ;
        }
    }

    private async Task HandleAddOrUpdateProvider()
    {
        if (Id > 0)
        {
            UpdateProviderDto updProvider = new UpdateProviderDto
            {
                Id = this.Id,
                Name = provider.Name,
                PhoneNumber = provider.PhoneNumber,
                Address = provider.Address,
                Description = provider.Description
            };

            var response = await ProviderService.UpdateProvider(updProvider);
            if (response.Success)
                ShowMessage(true, "The Provider has been updated");
            else
                ShowMessage(false, response.Message);
            hideLink = true;
        }
        else
        {
            var response = await ProviderService.AddProvider(provider);
            if (response.Success && response.Data!=null)
            {
                IdNewProvider = response.Data.Id;
                hideLink = false;
                ShowMessage(true, "Provider added successfully.");
            }
            else
            {
                hideLink = true;
                ShowMessage(false, response.Message);
            }
            hideMessage = false;
        }    
    }

    private void ShowMessage(bool isValid, string Message)
    {
        if (isValid)
        {
            message = Message;
            messageCssClass = "alert alert-success";
        }
        else
        {
            message = Message;
            messageCssClass = "alert alert-danger";
        }
        hideMessage = false;
    }

    void BackTo()
    {
        Navigation.NavigateTo("categories");
    }

    private void Clear()
    {
        provider = new AddProviderDto();
    }

    private void ToggleMessage()
    {
        hideMessage = true;
        hideLink = true;
        message = string.Empty;
        messageCssClass = string.Empty;
    }
}